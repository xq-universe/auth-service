version: 2

jobs:
  build:
    docker:
      - image: circleci/openjdk:11.0.2
    working_directory: ~/auth-service
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Install and compile code
          command: ./gradlew clean build
      - save_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          paths:
            - ~/.gradle/wrapper
      - save_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
          paths:
            - ~/.gradle/caches
      - save_cache:
          key: v1-artifact-cache-{{ checksum "VERSION" }}
          paths:
            - build/libs
      - store_artifacts:
          path: build/libs
  test:
    docker:
      - image: circleci/openjdk:11.0.2
    working_directory: ~/auth-service
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Test
          command: ./gradlew test

  release:
    docker:
      - image: circleci/openjdk:11.0.2
    working_directory: ~/auth-service
    steps:
      - checkout
      - restore_cache:
          key: v1-artifact-cache-{{ checksum "VERSION" }}
      - run:
          name: Release
          command: bash ./ci/release.sh

  docker:
    machine: true
    working_directory: ~/auth-service
    steps:
      - checkout
      - restore_cache:
          key: v1-artifact-cache-{{ checksum "VERSION" }}
      - run:
          name: Docker build
          command: bash ./ci/docker.sh

  deploy:
    machine: true
    working_directory: ~/auth-service
    steps:
      - checkout
      - restore_cache:
          key: v1-artifact-cache-{{ checksum "VERSION" }}
      - run:
          name: Deploy
          command: bash ./ci/deploy.sh

workflows:
  version: 2
  build-test-release-docker-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - release:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - docker:
          requires:
            - release
          filters:
            tags:
              only: /^v.*/
      - deploy:
          requires:
            - docker
